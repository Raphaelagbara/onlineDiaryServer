const entryRecord = require("../models/entryRecord.js");

//to view all entries
const getEntries = async (req, res) => {
  try {
    const postEntries = await entryRecord.find();

    console.log(postEntries);

    res.status(200).json(postEntries);
  } catch (error) {
    res.status(404).json({ message: error.message });
  }
};

//to create and save new entry
const createEntries = async (req, res) => {
  const { title, message, selectedFile, creator, tags } = req.body;

  const newEntryRecord = new entryRecord({
    title,
    message,
    selectedFile,
    creator,
    tags,
  });

  try {
    await newEntryRecord.save();

    res.status(201).json(newEntryRecord);
  } catch (error) {
    res.status(409).json({ message: error.message });
  }
};

//to update existing entry
const updateEntry = async (req, res) => {
  const { id } = req.params;
  const { title, message, creator, selectedFile, tags } = req.body;

  if (!mongoose.Types.ObjectId.isValid(id))
    return res.status(404).send(`No post with id: ${id}`);

  const updatedEntry = { creator, title, message, tags, selectedFile, _id: id };

  await entryRecord.findByIdAndUpdate(id, updatedEntry, { new: true });

  res.json(updatedEntry);
};

//delete entry logic
const deleteEntry = async (req, res) => {
  const { id } = req.params;

  if (!mongoose.Types.ObjectId.isValid(id))
    return res.status(404).send(`No post with id: ${id}`);

  await PostMessage.findByIdAndRemove(id);

  res.json({ message: "Post deleted successfully." });
};

//like post logic
const likePost = async (req, res) => {
  const { id } = req.params;

  if (!mongoose.Types.ObjectId.isValid(id))
    return res.status(404).send(`No post with id: ${id}`);

  const post = await PostMessage.findById(id);

  const updatedPost = await entryRecord.findByIdAndUpdate(
    id,
    { likeCount: post.likeCount + 1 },
    { new: true }
  );

  res.json(updatedEntry);
};

module.exports = {
  getEntries,
  createEntries,
  updateEntry,
  deleteEntry,
  likePost,
};
